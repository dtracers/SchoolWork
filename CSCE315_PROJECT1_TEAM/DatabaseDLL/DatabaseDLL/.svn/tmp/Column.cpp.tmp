/*
 Database API for Team 4
 Authors: Ben Beadle, Amanda Cofsky, David Turner

 The Column class which is contained by a Table. This column has a certain type
 Learn more at http://goo.gl/lTVVA
 */
#include "Column.h"
#include <sstream>
//Column constructor- checks validity of type given
Column::Column(string type) {
	varcharMaxLength = 100;
	isPrimary = false;

	if (type == "int" || type == "float" || type == "date" || type == "time") {
		colType = type;
	} else {
		string number = "";
		int newLength;
		colType = "varchar";
		for (int i = 0; i < type.length(); i++) {
			if (type[i] == '(') {
				i++;
				while (type[i] != ')') {
					number += type[i];
					i++;
				}
				break;
			}
		}

		//Make sure the varchar length is valid
		if ((number.size() > 0) && (type.compare(0, 7, "varchar") == 0)) {
			newLength = atoi(number.c_str());

			if (newLength <= 0) {
				throw DatabaseException(31);
			} else if (newLength > varcharMaxLength) {
				throw DatabaseException(32);
			} else {
				varcharMaxLength = newLength;
			}
		} else {
			cout << "COLUMN TYPE IS " << type << endl;
			throw DatabaseException(30);
		}
	}
}

Column::~Column() {

}

/*
 Makes sure that val is the correct type according to the column type
*/
bool Column::valValid(string val) {
	cout<<val<<endl;
	const char * valC = val.c_str();

	if (colType == "int") {
		stringstream typecast(val);
		int intVal = 0;
		typecast >> intVal;
		stringstream back;
		back << intVal;
		string temp;
		back >> temp;

		//atoi returns 0 if not successful

		if (temp != val) {
			throw DatabaseException(33, val + " not a valid integer.");
		}
	} else if (colType == "float") {
		stringstream typecast(val);
		float floatVal = 0;
		typecast >> floatVal;
		stringstream back;
		back << floatVal;
		string temp;
		back >> temp;

		//atoi returns 0 if not successful

		if (temp != val) {
			//case 10.00 is a valid float
			stringstream test2(temp);
			//case for an int
			int other;
			test2 >> other;
			if (other != floatVal) {
				throw DatabaseException(34, val + " not a valid float.");
			}
		}
	} else if (colType == "varchar") {
		if (val.size() > varcharMaxLength) {
			throw DatabaseException(35,
					val.size() + " is greater than " + varcharMaxLength + '.');
		}
	} else if (colType == "date") {
		//Allowed format: mm/dd/yyyy
		/*
		 if(val.size() != 10 || !isdigit(val[0]) ||
		 !isdigit(val[1]) || !isdigit(val[2]) || !isdigit(val[3]) || val[4] != '/' ||
		 !isdigit(val[5]) || !isdigit(val[6]) || val[7] != '/' || !isdigit(val[8]) ||
		 !isdigit(val[9])) {
		 throw DatabaseException(40, val + " is not a valid date. Accepted format is YYYY/MM/DD.");
		 }*/
		stringstream typecast(val);
		Date dateVal;
		typecast >> dateVal;
		stringstream back;
		back << dateVal;
		string temp;
		back >> temp;
	//	cout<<back<<endl;
	//	cout<<back<<endl;;
		cout<<temp<<"=";;

		cout<<val<<endl;;
		if (temp != val) {
			cout<<"WARNING "<<val<<"IS NOT A VALID TIME"<<endl;
			/*
			throw DatabaseException(
					40,
					val
							+ " is not a valid date. Accepted format is YYYY/MM/DD.");
			*/
		}

	} else if (colType == "time") {
		/*
		 if(val.size() != 8 || !isdigit(val[0]) || !isdigit(val[1]) || val[2] != ':' ||
		 !isdigit(val[3]) || !isdigit(val[4]) || val[5] != ':' || !isdigit(val[6]) ||
		 !isdigit(val[7])) {
		 throw DatabaseException(41, val + " is not a valid time. Accepted format is HH:MM:SS.");
		 }
		 */
		stringstream typecast(val);
		Time timeVal;
		cout<<"blah"<<val<<endl;
		typecast >> timeVal;
		cout<<"TIME IS"<<timeVal<<endl;
		stringstream back;
		back << timeVal;
		string temp;
		back >> temp;
		cout<<timeVal<<endl;
		cout<<temp<<"="<<val<<endl;
		//atoi returns 0 if not successful

		if (temp != val) {
			cout<<"WARNING "<<val<<"IS NOT A VALID TIME"<<endl;
			/*
			throw DatabaseException(41,
					val + " is not a valid time. Accepted format is HH:MM:SS.");
					*/
		}
	}

	return true;
}

/*
 Checks if the val already exists in the column
*/
bool Column::valExists(string val) {
	const char * valC = val.c_str();
	if (!valValid(val)) {
		//should crash first
		return true;
	}
	//if here the value is valid
	if (colType == "int") {

		stringstream typecast(val);
		int intVal = 0;
		typecast >> intVal;
		for (int i = 0; i < intList.size(); i++) {
			if (intList[i] == intVal) {

				return true;
			}
		}
	} else if (colType == "float") {
		stringstream typecast(val);
		float floatVal = 0;
		typecast >> floatVal;

		for (int i = 0; i < floatList.size(); i++) {

			if (floatList[i] == floatVal) {

				return true;
			}
		}
	} else if (colType == "varchar") {
		if (val.size() > varcharMaxLength) {
			throw DatabaseException(35,
					val.size() + " is greater than " + varcharMaxLength + '.');
		}

		for (int i = 0; i < varcharList.size(); i++) {
			if (varcharList[i].compare(val) == 0) {

				return true;
			}
		}
	} else if (colType == "date") {
		//Allowed format: mm/dd/yyyy

		stringstream typecast(val);
		Date dateVal;
		typecast >> dateVal;
		Date* tempDate1 = new Date(dateVal);
		for (int i = 0; i < dateList.size(); i++) {
			Date* tempDate = (dateList[i]);
			cout<<tempDate;
			cout<<tempDate1;
			if ((*tempDate) == (*tempDate1)) {

				//	delete dateVal;
				return true;
			}
		}

	} else if (colType == "time") {

		stringstream typecast(val);
		Time timeVal;
		typecast >> timeVal;
		Time* tempTime1 = new Time(timeVal);
		for (int i = 0; i < timeList.size(); i++) {
			Time* tempTime = (timeList[i]);
			if ((*tempTime) == (*tempTime1)) {
				return true;
			}
		}
	}

	return false;
}

/*
 The table loops through the columns and calls this method to add a row
*/
void Column::addRow(string val, int editRowIndex) {
	if (val != "D3FAL7")
		if (!valValid(val)) {
			//should crash first
			return;
		}
	//if here the value is valid
	const char * valC = val.c_str();
	
	
	if (colType == "int") {
		stringstream typecast(val);
		int intVal = 0;
		typecast >> intVal;

		if (editRowIndex == -1) {
			intList.push_back(intVal);
		} else {
			intList[editRowIndex] = intVal;
		}
	} else if (colType == "float") {
		stringstream typecast(val);
		float floatVal = 0;
		typecast >> floatVal;

		if (editRowIndex == -1) {
			floatList.push_back(floatVal);
		} else {
			floatList[editRowIndex] = floatVal;
		}

	} else if (colType == "varchar") {
		if (editRowIndex == -1) {
			varcharList.push_back(val);
		} else {
			varcharList[editRowIndex] = val;
		}
	} else if (colType == "date") {
		stringstream typecast(val);
		Date dateVal;
		if (val != "D3FAL7")
			typecast >> dateVal;
		Date* tempDate = new Date(dateVal);

		if (editRowIndex == -1) {
			dateList.push_back(tempDate);
		} else {
			dateList[editRowIndex] = tempDate;
		}
	} else if (colType == "time") {
		stringstream typecast(val);
		Time timeVal;
		if (val != "D3FAL7")
			typecast >> timeVal;
		Time* tempTime = new Time(timeVal);

		if (editRowIndex == -1) {
			timeList.push_back(tempTime);
		} else {
			timeList[editRowIndex] = tempTime;
		}
	}
}

/*
 The Table class calls this method on all it's columns to delete a row
*/
void Column::deleteRow(int rowIndex) {
	if (colType == "int") {
		intList.erase(intList.begin() + rowIndex);
	} else if (colType == "float") {
		floatList.erase(floatList.begin() + rowIndex);
	} else if (colType == "varchar") {
		varcharList.erase(varcharList.begin() + rowIndex);
	}
	if (colType == "date") {
		dateList.erase(dateList.begin() + rowIndex);
	}
	if (colType == "timeList") {
		timeList.erase(timeList.begin() + rowIndex);
	}
}

/*
 Print the column list
*/
string Column::printDataList() {
	string s = "";
	ostringstream stringForConversion;

	if (colType == "int") {
		for (int i = 0; i < intList.size(); i++) {
			stringForConversion.str("");
			stringForConversion << intList[i];
			s += ", " + stringForConversion.str();
		}
	} else if (colType == "float") {
		for (int i = 0; i < floatList.size(); i++) {
			stringForConversion.str("");
			stringForConversion << floatList[i];
			s += ", " + stringForConversion.str();
		}
	} else if (colType == "varchar") {
		for (int i = 0; i < varcharList.size(); i++) {
			stringForConversion.str("");
			stringForConversion << varcharList[i];
			s += ", " + stringForConversion.str();
		}
	} else if (colType == "date") {
		for (int i = 0; i < dateList.size(); i++) {
			stringForConversion.str("");
			stringForConversion << (*dateList[i]);
			s += ", " + stringForConversion.str();
		}
	} else if (colType == "time") {
		for (int i = 0; i < timeList.size(); i++) {
			stringForConversion.str("");
			stringForConversion << (*timeList[i]);
			s += ", " + stringForConversion.str();
		}
	}
	return s;
}

/*
 Count the number of rows
*/
int Column::rowCount() {
	if (colType == "int") {
		return intList.size();
	} else if (colType == "float") {
		return floatList.size();
	} else if (colType == "varchar") {
		return varcharList.size();
	} else if (colType == "date") {
		return dateList.size();
	} else if (colType == "time") {
		return timeList.size();
	}
	return -1;
}

/*
 Get the value at the row index
*/
string Column::getValueAtRowIndex(int rowIndex) {
	if (rowIndex > rowCount()) {
		throw DatabaseException(23,
				rowIndex + " is greater than " + rowCount() + '.');
	} else if (rowIndex < 0) {
		throw DatabaseException(23, rowIndex + " must be greater than 0.");
	}

	if (colType == "int") {
		stringstream ss;
		ss << intList[rowIndex];
		return ss.str();
	} else if (colType == "float") {
		stringstream ss;
		ss << floatList[rowIndex];
		return ss.str();
	} else if (colType == "varchar") {
		return varcharList[rowIndex];
	} else if (colType == "date") {
		return dateList[rowIndex]->toString();
	} else if (colType == "time") {
		return timeList[rowIndex]->toString();
	}
	return "";
}
